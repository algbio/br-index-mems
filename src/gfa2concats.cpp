/* Code generated by chatGPT starting with 
 * "Give a C++ code to read .gfa and ouput node labels 
 *  concatenated using # as separator"
 *
 */ 
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>

using namespace std;

int main() {
    vector<string> node_labels;
    vector<string> edge_labels;
    vector<string> path_labels;

    unordered_map<int, unordered_set<int>> adj_list;

    string line;
    while (getline(cin, line)) {
        if (line.empty() || line[0] == '#') {
            continue; // Skip empty or comment lines
        }

        vector<string> fields;
        string field;
        for (char c : line) {
            if (c == '\t') {
                fields.push_back(field);
                field.clear();
            } else {
                field += c;
            }
        }
        fields.push_back(field);

        if (fields[0] == "S") {
            node_labels.push_back(fields[2]);
        } else if (fields[0] == "L") {
            int start_node_id = stoi(fields[1]);
            bool start_node_orientation = (fields[2] == "-");
            int end_node_id = stoi(fields[3]);
            bool end_node_orientation = (fields[4] == "-");
            adj_list[start_node_id].insert(end_node_id);
            if (!end_node_orientation) {
                adj_list[end_node_id].insert(start_node_id);
            }
            string start_node_label = node_labels[start_node_id - 1];
            if (start_node_orientation) {
                start_node_label = start_node_label + "_rev";
            }
            string end_node_label = node_labels[end_node_id - 1];
            if (end_node_orientation) {
                end_node_label = end_node_label + "_rev";
            }
            edge_labels.push_back(start_node_label + ">" +end_node_label);
        }
    }

    cout << ">nodes" << endl;
    for (string node_label : node_labels) {
        cout << node_label << "#";
    }
    cout << endl;

    cout << ">edges" << endl;
    for (string edge_label : edge_labels) {
        cout << edge_label << "#";
    }
    cout << endl;

    cout << ">paths of length 3" << endl;
    for (auto& kv1 : adj_list) {
        int node1_id = kv1.first;
        for (int node2_id : kv1.second) {
            for (int node3_id : adj_list[node2_id]) {
                string node1_label = node_labels[node1_id - 1];
                string node2_label = node_labels[node2_id - 1];
                string node3_label = node_labels[node3_id - 1];
                path_labels.push_back(node1_label + ">" + node2_label + 
                                                    ">" + node3_label);
            }
        }
   }

   for (string path_label : path_labels) {
       cout << path_label << "#";
   }
   cout << endl;
          
   return 1;
}






